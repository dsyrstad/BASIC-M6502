/// PETSCII character set implementation for Commodore BASIC compatibility
///
/// This module handles the conversion between ASCII and PETSCII character sets.
/// PETSCII (PET Standard Code of Information Interchange) was used by Commodore computers.

class CommodoreChars {
  /// PETSCII to ASCII conversion table for printable characters
  static const Map<int, int> petsciiToAscii = {
    // Control characters (0-31)
    0x00: 0x00, // NULL
    0x01: 0x01, // Start of heading
    0x02: 0x02, // Start of text
    0x03: 0x03, // End of text
    0x04: 0x04, // End of transmission
    0x05: 0x05, // Enquiry (white)
    0x06: 0x06, // Acknowledge
    0x07: 0x07, // Bell
    0x08: 0x08, // Backspace
    0x09: 0x09, // Tab
    0x0A: 0x0A, // Line feed
    0x0B: 0x0B, // Vertical tab
    0x0C: 0x0C, // Form feed
    0x0D: 0x0D, // Carriage return
    0x0E: 0x0E, // Shift out (lowercase)
    0x0F: 0x0F, // Shift in
    0x10: 0x10, // Data link escape
    0x11: 0x11, // Cursor down
    0x12: 0x12, // Reverse video on
    0x13: 0x13, // Home
    0x14: 0x14, // Delete
    0x15: 0x15, //
    0x16: 0x16, //
    0x17: 0x17, //
    0x18: 0x18, //
    0x19: 0x19, //
    0x1A: 0x1A, //
    0x1B: 0x1B, // Escape
    0x1C: 0x1C, // Red
    0x1D: 0x1D, // Cursor right
    0x1E: 0x1E, // Green
    0x1F: 0x1F, // Blue

    // Standard ASCII printable characters (32-127)
    0x20: 0x20, // Space
    0x21: 0x21, // !
    0x22: 0x22, // "
    0x23: 0x23, // #
    0x24: 0x24, // $
    0x25: 0x25, // %
    0x26: 0x26, // &
    0x27: 0x27, // '
    0x28: 0x28, // (
    0x29: 0x29, // )
    0x2A: 0x2A, // *
    0x2B: 0x2B, // +
    0x2C: 0x2C, // ,
    0x2D: 0x2D, // -
    0x2E: 0x2E, // .
    0x2F: 0x2F, // /
    0x30: 0x30, // 0
    0x31: 0x31, // 1
    0x32: 0x32, // 2
    0x33: 0x33, // 3
    0x34: 0x34, // 4
    0x35: 0x35, // 5
    0x36: 0x36, // 6
    0x37: 0x37, // 7
    0x38: 0x38, // 8
    0x39: 0x39, // 9
    0x3A: 0x3A, // :
    0x3B: 0x3B, // ;
    0x3C: 0x3C, // <
    0x3D: 0x3D, // =
    0x3E: 0x3E, // >
    0x3F: 0x3F, // ?
    0x40: 0x40, // @
    0x41: 0x61, // A -> a (PETSCII uppercase to ASCII lowercase)
    0x42: 0x62, // B -> b
    0x43: 0x63, // C -> c
    0x44: 0x64, // D -> d
    0x45: 0x65, // E -> e
    0x46: 0x66, // F -> f
    0x47: 0x67, // G -> g
    0x48: 0x68, // H -> h
    0x49: 0x69, // I -> i
    0x4A: 0x6A, // J -> j
    0x4B: 0x6B, // K -> k
    0x4C: 0x6C, // L -> l
    0x4D: 0x6D, // M -> m
    0x4E: 0x6E, // N -> n
    0x4F: 0x6F, // O -> o
    0x50: 0x70, // P -> p
    0x51: 0x71, // Q -> q
    0x52: 0x72, // R -> r
    0x53: 0x73, // S -> s
    0x54: 0x74, // T -> t
    0x55: 0x75, // U -> u
    0x56: 0x76, // V -> v
    0x57: 0x77, // W -> w
    0x58: 0x78, // X -> x
    0x59: 0x79, // Y -> y
    0x5A: 0x7A, // Z -> z
    0x5B: 0x5B, // [
    0x5C: 0x5C, // \
    0x5D: 0x5D, // ]
    0x5E: 0x5E, // ^
    0x5F: 0x5F, // _

    // PETSCII graphics characters (96-127) - map to closest ASCII equivalent
    0x60: 0x60, // `
    0x61: 0x41, // Shifted A (displays as uppercase A)
    0x62: 0x42, // Shifted B
    0x63: 0x43, // Shifted C
    0x64: 0x44, // Shifted D
    0x65: 0x45, // Shifted E
    0x66: 0x46, // Shifted F
    0x67: 0x47, // Shifted G
    0x68: 0x48, // Shifted H
    0x69: 0x49, // Shifted I
    0x6A: 0x4A, // Shifted J
    0x6B: 0x4B, // Shifted K
    0x6C: 0x4C, // Shifted L
    0x6D: 0x4D, // Shifted M
    0x6E: 0x4E, // Shifted N
    0x6F: 0x4F, // Shifted O
    0x70: 0x50, // Shifted P
    0x71: 0x51, // Shifted Q
    0x72: 0x52, // Shifted R
    0x73: 0x53, // Shifted S
    0x74: 0x54, // Shifted T
    0x75: 0x55, // Shifted U
    0x76: 0x56, // Shifted V
    0x77: 0x57, // Shifted W
    0x78: 0x58, // Shifted X
    0x79: 0x59, // Shifted Y
    0x7A: 0x5A, // Shifted Z

    // Graphics characters - map to ASCII approximations
    0x7B: 0x7B, // {
    0x7C: 0x7C, // |
    0x7D: 0x7D, // }
    0x7E: 0x7E, // ~
    0x7F: 0x7F, // DEL

    // Extended PETSCII characters (128-255)
    // Control characters with high bit set
    0x80: 0x80, //
    0x81: 0x81, // Orange
    0x82: 0x82, //
    0x83: 0x83, //
    0x84: 0x84, //
    0x85: 0x85, // F1
    0x86: 0x86, // F3
    0x87: 0x87, // F5
    0x88: 0x88, // F7
    0x89: 0x89, // F2
    0x8A: 0x8A, // F4
    0x8B: 0x8B, // F6
    0x8C: 0x8C, // F8
    0x8D: 0x8D, // Shift+Return
    0x8E: 0x8E, // Shift out (uppercase)
    0x8F: 0x8F, //

    // More extended characters
    0x90: 0x90, // Black
    0x91: 0x91, // Cursor up
    0x92: 0x92, // Reverse video off
    0x93: 0x93, // Clear screen
    0x94: 0x94, // Insert
    0x95: 0x95, // Brown
    0x96: 0x96, // Light red
    0x97: 0x97, // Gray 1
    0x98: 0x98, // Gray 2
    0x99: 0x99, // Light green
    0x9A: 0x9A, // Light blue
    0x9B: 0x9B, // Gray 3
    0x9C: 0x9C, // Purple
    0x9D: 0x9D, // Cursor left
    0x9E: 0x9E, // Yellow
    0x9F: 0x9F, // Cyan

    // PETSCII graphics and symbols (160-255)
    // For simplicity, map high characters to space or closest ASCII
    0xA0: 0x20, // Non-breaking space -> space
  };

  /// ASCII to PETSCII conversion table
  static const Map<int, int> asciiToPetscii = {
    // Control characters
    0x00: 0x00, // NULL
    0x01: 0x01, // Start of heading
    0x02: 0x02, // Start of text
    0x03: 0x03, // End of text
    0x04: 0x04, // End of transmission
    0x05: 0x05, // Enquiry
    0x06: 0x06, // Acknowledge
    0x07: 0x07, // Bell
    0x08: 0x08, // Backspace
    0x09: 0x09, // Tab
    0x0A: 0x0A, // Line feed
    0x0B: 0x0B, // Vertical tab
    0x0C: 0x0C, // Form feed
    0x0D: 0x0D, // Carriage return
    0x0E: 0x0E, // Shift out
    0x0F: 0x0F, // Shift in

    // Printable ASCII characters
    0x20: 0x20, // Space
    0x21: 0x21, // !
    0x22: 0x22, // "
    0x23: 0x23, // #
    0x24: 0x24, // $
    0x25: 0x25, // %
    0x26: 0x26, // &
    0x27: 0x27, // '
    0x28: 0x28, // (
    0x29: 0x29, // )
    0x2A: 0x2A, // *
    0x2B: 0x2B, // +
    0x2C: 0x2C, // ,
    0x2D: 0x2D, // -
    0x2E: 0x2E, // .
    0x2F: 0x2F, // /
    0x30: 0x30, // 0
    0x31: 0x31, // 1
    0x32: 0x32, // 2
    0x33: 0x33, // 3
    0x34: 0x34, // 4
    0x35: 0x35, // 5
    0x36: 0x36, // 6
    0x37: 0x37, // 7
    0x38: 0x38, // 8
    0x39: 0x39, // 9
    0x3A: 0x3A, // :
    0x3B: 0x3B, // ;
    0x3C: 0x3C, // <
    0x3D: 0x3D, // =
    0x3E: 0x3E, // >
    0x3F: 0x3F, // ?
    0x40: 0x40, // @

    // ASCII uppercase to PETSCII lowercase (Commodore's inverted case)
    0x41: 0x61, // A -> a
    0x42: 0x62, // B -> b
    0x43: 0x63, // C -> c
    0x44: 0x64, // D -> d
    0x45: 0x65, // E -> e
    0x46: 0x66, // F -> f
    0x47: 0x67, // G -> g
    0x48: 0x68, // H -> h
    0x49: 0x69, // I -> i
    0x4A: 0x6A, // J -> j
    0x4B: 0x6B, // K -> k
    0x4C: 0x6C, // L -> l
    0x4D: 0x6D, // M -> m
    0x4E: 0x6E, // N -> n
    0x4F: 0x6F, // O -> o
    0x50: 0x70, // P -> p
    0x51: 0x71, // Q -> q
    0x52: 0x72, // R -> r
    0x53: 0x73, // S -> s
    0x54: 0x74, // T -> t
    0x55: 0x75, // U -> u
    0x56: 0x76, // V -> v
    0x57: 0x77, // W -> w
    0x58: 0x78, // X -> x
    0x59: 0x79, // Y -> y
    0x5A: 0x7A, // Z -> z

    0x5B: 0x5B, // [
    0x5C: 0x5C, // \
    0x5D: 0x5D, // ]
    0x5E: 0x5E, // ^
    0x5F: 0x5F, // _
    0x60: 0x60, // `

    // ASCII lowercase to PETSCII uppercase (Commodore's inverted case)
    0x61: 0x41, // a -> A
    0x62: 0x42, // b -> B
    0x63: 0x43, // c -> C
    0x64: 0x44, // d -> D
    0x65: 0x45, // e -> E
    0x66: 0x46, // f -> F
    0x67: 0x47, // g -> G
    0x68: 0x48, // h -> H
    0x69: 0x49, // i -> I
    0x6A: 0x4A, // j -> J
    0x6B: 0x4B, // k -> K
    0x6C: 0x4C, // l -> L
    0x6D: 0x4D, // m -> M
    0x6E: 0x4E, // n -> N
    0x6F: 0x4F, // o -> O
    0x70: 0x50, // p -> P
    0x71: 0x51, // q -> Q
    0x72: 0x52, // r -> R
    0x73: 0x53, // s -> S
    0x74: 0x54, // t -> T
    0x75: 0x55, // u -> U
    0x76: 0x56, // v -> V
    0x77: 0x57, // w -> W
    0x78: 0x58, // x -> X
    0x79: 0x59, // y -> Y
    0x7A: 0x5A, // z -> Z

    0x7B: 0x7B, // {
    0x7C: 0x7C, // |
    0x7D: 0x7D, // }
    0x7E: 0x7E, // ~
    0x7F: 0x7F, // DEL
  };

  /// Special PETSCII control codes
  static const int clearScreen = 0x93;
  static const int home = 0x13;
  static const int cursorDown = 0x11;
  static const int cursorUp = 0x91;
  static const int cursorRight = 0x1D;
  static const int cursorLeft = 0x9D;
  static const int reverseOn = 0x12;
  static const int reverseOff = 0x92;
  static const int insert = 0x94;
  static const int delete = 0x14;

  /// Color codes
  static const int black = 0x90;
  static const int white = 0x05;
  static const int red = 0x1C;
  static const int cyan = 0x9F;
  static const int purple = 0x9C;
  static const int green = 0x1E;
  static const int blue = 0x1F;
  static const int yellow = 0x9E;
  static const int orange = 0x81;
  static const int brown = 0x95;
  static const int lightRed = 0x96;
  static const int gray1 = 0x97;
  static const int gray2 = 0x98;
  static const int lightGreen = 0x99;
  static const int lightBlue = 0x9A;
  static const int gray3 = 0x9B;

  /// Convert PETSCII character to ASCII
  static int petsciiToAsciiChar(int petscii) {
    return petsciiToAscii[petscii] ?? petscii;
  }

  /// Convert ASCII character to PETSCII
  static int asciiToPetsciiChar(int ascii) {
    return asciiToPetscii[ascii] ?? ascii;
  }

  /// Convert PETSCII string to ASCII string
  static String petsciiToAsciiString(List<int> petsciiBytes) {
    return String.fromCharCodes(
      petsciiBytes.map((byte) => petsciiToAsciiChar(byte)).toList()
    );
  }

  /// Convert ASCII string to PETSCII bytes
  static List<int> asciiToPetsciiBytes(String asciiString) {
    return asciiString.codeUnits.map((char) => asciiToPetsciiChar(char)).toList();
  }

  /// Check if character is a PETSCII control character
  static bool isControlChar(int petscii) {
    return petscii < 0x20 || (petscii >= 0x80 && petscii < 0xA0);
  }

  /// Check if character is a PETSCII graphics character
  static bool isGraphicsChar(int petscii) {
    return petscii >= 0xA0;
  }

  /// Check if character is printable PETSCII
  static bool isPrintableChar(int petscii) {
    return (petscii >= 0x20 && petscii < 0x80) || petscii >= 0xA0;
  }

  /// Get description of PETSCII control character
  static String getControlCharDescription(int petscii) {
    switch (petscii) {
      case 0x00: return 'NULL';
      case 0x05: return 'WHITE';
      case 0x08: return 'BACKSPACE';
      case 0x09: return 'TAB';
      case 0x0A: return 'LINE FEED';
      case 0x0D: return 'RETURN';
      case 0x0E: return 'SHIFT OUT (LOWERCASE)';
      case 0x11: return 'CURSOR DOWN';
      case 0x12: return 'REVERSE ON';
      case 0x13: return 'HOME';
      case 0x14: return 'DELETE';
      case 0x1C: return 'RED';
      case 0x1D: return 'CURSOR RIGHT';
      case 0x1E: return 'GREEN';
      case 0x1F: return 'BLUE';
      case 0x81: return 'ORANGE';
      case 0x85: return 'F1';
      case 0x86: return 'F3';
      case 0x87: return 'F5';
      case 0x88: return 'F7';
      case 0x89: return 'F2';
      case 0x8A: return 'F4';
      case 0x8B: return 'F6';
      case 0x8C: return 'F8';
      case 0x8D: return 'SHIFT+RETURN';
      case 0x8E: return 'SHIFT OUT (UPPERCASE)';
      case 0x90: return 'BLACK';
      case 0x91: return 'CURSOR UP';
      case 0x92: return 'REVERSE OFF';
      case 0x93: return 'CLEAR SCREEN';
      case 0x94: return 'INSERT';
      case 0x95: return 'BROWN';
      case 0x96: return 'LIGHT RED';
      case 0x97: return 'GRAY 1';
      case 0x98: return 'GRAY 2';
      case 0x99: return 'LIGHT GREEN';
      case 0x9A: return 'LIGHT BLUE';
      case 0x9B: return 'GRAY 3';
      case 0x9C: return 'PURPLE';
      case 0x9D: return 'CURSOR LEFT';
      case 0x9E: return 'YELLOW';
      case 0x9F: return 'CYAN';
      default: return 'UNKNOWN(${petscii.toRadixString(16).toUpperCase()})';
    }
  }
}